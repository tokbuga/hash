(function() {
  var adlar, db, init, kuran, log, min, remap, tekles, test, yaz;

  db = require("mysql2/promise");

  kuran = require("./dene.json");

  adlar = require("./adlar.json");

  log = console.log;

  yaz = require("fs");

  min = +2e308;

  //https://wordpress.org/support/topic/ignoring-arabic-diacritics/
  remap = {
    'إ': 'ا',
    'آ': 'ا',
    'أ': 'ا',
    'ئ': 'ى',
    'ة': 'ه',
    'ؤ': 'و',
    'آ': 'ا',
    "ء": " "
  };

  test = function(sonuc, mevcut) {
    return sonuc + mevcut.toNumber();
  };

  Number.prototype.toNumber = function() {
    return this;
  };

  Array.prototype.toNumber = function() {
    return this.reduce(test, 0);
  };

  String.prototype.toNumber = function() {
    var deger, metin;
    metin = this.toString().trim().replace(/s+/, "").split("").map(function(c) {
      return remap[c] || c;
    }).filter(function(d) {
      return d.charCodeAt(0) > 1000;
    }).join("");
    if (!(metin.length - 1)) {
      metin = metin[remap] || metin;
      deger = metin.charCodeAt(0) - 1575;
      return deger;
    }
    return metin.split("").toNumber();
  };

  tekles = function(deger) {
    var i, k, len, ref, toplam;
    toplam = 0;
    ref = deger.toString().split("");
    for (i = 0, len = ref.length; i < len; i++) {
      k = ref[i];
      toplam += k * 1;
    }
    if (toplam.toString().length > 1) {
      return tekles(toplam);
    }
    return toplam;
  };

  if (init = async function() {
    var ayet_indeks, ayet_no, ayetler, cols, harf, i, karakter, kindeks, len, metin, qmks, results, row, sadtr, sql, sure_ad, sure_indeks, sure_no, vals;
    sql = (await db.createConnection({
      user: "root",
      password: "nuYj2h3XaW",
      database: "hash"
    }));
    results = [];
    for (sure_indeks = i = 0, len = kuran.length; i < len; sure_indeks = ++i) {
      ({
        name: sure_ad,
        aya: ayetler,
        index: sure_no,
        harf
      } = kuran[sure_indeks]);
      sadtr = adlar.find(function(n) {
        return !(n.no - sure_no);
      }).ad;
      results.push((await (async function() {
        var j, len1, results1;
        results1 = [];
        for (ayet_indeks = j = 0, len1 = ayetler.length; j < len1; ayet_indeks = ++j) {
          ({
            index: ayet_no,
            text: metin
          } = ayetler[ayet_indeks]);
          results1.push((await (async function() {
            var l, len2, ref, results2;
            ref = metin.split("");
            results2 = [];
            for (kindeks = l = 0, len2 = ref.length; l < len2; kindeks = ++l) {
              karakter = ref[kindeks];
              harf = remap[karakter] || karakter;
              row = {
                sure: sure_no,
                sadar: sure_ad,
                sadtr: sadtr,
                ayetler: ayetler.length,
                ayet: ayet_no,
                kindeks: kindeks,
                karakter: karakter,
                harf: harf,
                kod: harf.charCodeAt(0),
                kkod: karakter.charCodeAt(0),
                k1534: karakter.charCodeAt(0) - 1534,
                k1535: karakter.charCodeAt(0) - 1535,
                k1536: karakter.charCodeAt(0) - 1536,
                h1534: harf.charCodeAt(0) - 1534,
                h1535: harf.charCodeAt(0) - 1535,
                h1536: harf.charCodeAt(0) - 1536,
                khex: "0xF1" + karakter.charCodeAt(0).toString(16),
                hhex: "0xF1" + harf.charCodeAt(0).toString(16)
              };
              cols = Object.keys(row).join(",");
              vals = Object.values(row);
              qmks = Object.keys(row).map(function(e) {
                return "?";
              }).join(",");
              console.log(kindeks, "\t", metin.length, "\t", ayet_no, "\t", ayet_indeks, "\t", ayetler.length, "\t", sure_no, "\t", sure_indeks, "\t", kuran.length, "\t", karakter.charCodeAt(0));
              results2.push((await sql.query(`INSERT INTO q (${cols}) VALUES (${qmks})`, vals)));
            }
            return results2;
          })()));
        }
        return results1;
      })()));
    }
    return results;
  }) {
    init();
  }

  yaz.writeFileSync(`denendi/${Date.now()}.json`, JSON.stringify(kuran, null, "\t"));

  yaz.writeFileSync("deneme.txt", parseFloat(yaz.readFileSync("deneme.txt")) + 1);

}).call(this);

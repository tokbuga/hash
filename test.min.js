(function() {
  var adlar, ayet_indeks, ayet_no, ayetler, dene, denenecek, harf, i, j, kuran, len, len1, log, metin, n, sure, sure_ad, sure_indeks, sure_no, test;

  kuran = require("./data.json");

  adlar = require("./adlar.json");

  log = console.log;

  test = function(sonuc, mevcut) {
    return sonuc + mevcut.toNumber();
  };

  Number.prototype.toNumber = function() {
    return this;
  };

  Array.prototype.toNumber = function() {
    return this.reduce(test, 0);
  };

  String.prototype.toNumber = function() {
    if (!(this.length - 1)) {
      return this.charCodeAt(0);
    }
    return this.split("").toNumber();
  };

  denenecek = [];

  for (sure_indeks = i = 0, len = kuran.length; i < len; sure_indeks = ++i) {
    ({
      name: sure_ad,
      aya: ayetler,
      index: sure_no
    } = kuran[sure_indeks]);
    dene = false;
    harf = ayetler[0].text.split(/\s+/, 1)[0];
    if (harf.length < 6) {
      sure = adlar.find(function(s) {
        return !(s.no - sure_no);
      });
      kuran[sure_indeks].harf = harf;
      if (!sure.oku) {
        continue;
      }
      log("dene:", sure, ayetler[0].text, "harf:", {
        [`${harf}`]: dene = harf.length
      });
    }
    for (ayet_indeks = j = 0, len1 = ayetler.length; j < len1; ayet_indeks = ++j) {
      ({
        index: ayet_no,
        text: metin
      } = ayetler[ayet_indeks]);
      ayetler[ayet_indeks] = metin.toNumber();
    }
    if (dene) {
      log(sure_no, "->", sure_ad, "->", sure_ad.toNumber());
      log(sure_no, sure_ad, ayetler, n = ayetler.toNumber());
      denenecek.push(kuran[sure_indeks]);
    }
  }

  //require("fs").writeFileSync "dene.json", JSON.stringify(denenecek, null, "\t")
  log("denenecek:", denenecek.length);

}).call(this);

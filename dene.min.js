(function() {
  var ayet_indeks, ayet_no, ayetler, deger, harf, i, j, kuran, len, len1, log, metin, min, remap, sonuc, sure_ad, sure_indeks, sure_no, test, toplam, yaz;

  kuran = require("./dene.json");

  log = console.log;

  yaz = require("fs");

  min = +2e308;

  //https://wordpress.org/support/topic/ignoring-arabic-diacritics/
  remap = {
    'إ': 'ا',
    'آ': 'ا',
    'أ': 'ا',
    'ئ': 'ى',
    'ة': 'ه',
    'ؤ': 'و',
    'آ': 'ا',
    "ء": " "
  };

  test = function(sonuc, mevcut) {
    return sonuc + mevcut.toNumber();
  };

  Number.prototype.toNumber = function() {
    return this;
  };

  Array.prototype.toNumber = function() {
    return this.reduce(test, 0);
  };

  String.prototype.toNumber = function() {
    var deger, metin;
    metin = this.toString().trim().split("").map(function(c) {
      return remap[c] || c;
    }).join("").replace(/s+/, "");
    if (!(metin.length - 1)) {
      metin = metin[remap] || metin;
      deger = metin.charCodeAt(0) - 1575;
      return deger;
    }
    return metin.split("").toNumber();
  };

  for (sure_indeks = i = 0, len = kuran.length; i < len; sure_indeks = ++i) {
    ({
      name: sure_ad,
      aya: ayetler,
      index: sure_no,
      harf
    } = kuran[sure_indeks]);
    for (ayet_indeks = j = 0, len1 = ayetler.length; j < len1; ayet_indeks = ++j) {
      ({
        index: ayet_no,
        text: metin
      } = ayetler[ayet_indeks]);
      ayetler[ayet_indeks] = metin.toNumber();
    }
    toplam = ayetler.toNumber();
    deger = harf.toNumber();
    sonuc = (toplam % deger).toFixed(0) * 1;
    kuran[sure_indeks] = {
      sure: sure_no,
      sonuc,
      deger,
      toplam,
      harfler: harf
    };
  }

  console.table({
    ISLEM: "Toplam değerin Değer'e modunun alınması"
  });

  console.table(kuran);

  console.log(kuran);

  yaz.writeFileSync(`denendi/${Date.now()}.json`, JSON.stringify(kuran, null, "\t"));

  yaz.writeFileSync("deneme.txt", parseFloat(yaz.readFileSync("deneme.txt")) + 1);

}).call(this);
